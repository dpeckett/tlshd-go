diff -u a/cipher_suites.go b/cipher_suites.go
--- a/cipher_suites.go	2024-03-01 09:37:46.487971332 +0100
+++ b/cipher_suites.go	2024-03-01 09:51:34.023952906 +0100
@@ -10,14 +10,11 @@
 	"crypto/cipher"
 	"crypto/des"
 	"crypto/hmac"
-	"crypto/internal/boring"
 	"crypto/rc4"
 	"crypto/sha1"
 	"crypto/sha256"
 	"fmt"
 	"hash"
-	"internal/cpu"
-	"runtime"
 
 	"golang.org/x/crypto/chacha20poly1305"
 )
@@ -379,15 +376,8 @@
 }
 
 var (
-	hasGCMAsmAMD64 = cpu.X86.HasAES && cpu.X86.HasPCLMULQDQ
-	hasGCMAsmARM64 = cpu.ARM64.HasAES && cpu.ARM64.HasPMULL
-	// Keep in sync with crypto/aes/cipher_s390x.go.
-	hasGCMAsmS390X = cpu.S390X.HasAES && cpu.S390X.HasAESCBC && cpu.S390X.HasAESCTR &&
-		(cpu.S390X.HasGHASH || cpu.S390X.HasAESGCM)
-
-	hasAESGCMHardwareSupport = runtime.GOARCH == "amd64" && hasGCMAsmAMD64 ||
-		runtime.GOARCH == "arm64" && hasGCMAsmARM64 ||
-		runtime.GOARCH == "s390x" && hasGCMAsmS390X
+	// The following will cause the TLS 1.3 handshake to preferentially use an AES cipher.
+	hasAESGCMHardwareSupport = true
 )
 
 var aesgcmCiphers = map[uint16]bool{
@@ -439,11 +429,7 @@
 // macSHA1 returns a SHA-1 based constant time MAC.
 func macSHA1(key []byte) hash.Hash {
 	h := sha1.New
-	// The BoringCrypto SHA1 does not have a constant-time
-	// checksum function, so don't try to use it.
-	if !boring.Enabled {
-		h = newConstantTimeHash(h)
-	}
+	h = newConstantTimeHash(h)
 	return hmac.New(h, key)
 }
 
@@ -532,13 +518,7 @@
 	if err != nil {
 		panic(err)
 	}
-	var aead cipher.AEAD
-	if boring.Enabled {
-		aead, err = boring.NewGCMTLS(aes)
-	} else {
-		boring.Unreachable()
-		aead, err = cipher.NewGCM(aes)
-	}
+	aead, err := cipher.NewGCM(aes)
 	if err != nil {
 		panic(err)
 	}
@@ -598,7 +578,6 @@
 func (c *cthWrapper) Sum(b []byte) []byte         { return c.h.ConstantTimeSum(b) }
 
 func newConstantTimeHash(h func() hash.Hash) func() hash.Hash {
-	boring.Unreachable()
 	return func() hash.Hash {
 		return &cthWrapper{h().(constantTimeHash)}
 	}
diff -u a/common.go b/common.go
--- a/common.go	2024-03-01 09:37:46.487971332 +0100
+++ b/common.go	2024-03-01 09:51:00.095953662 +0100
@@ -18,7 +18,6 @@
 	"crypto/x509"
 	"errors"
 	"fmt"
-	"internal/godebug"
 	"io"
 	"net"
 	"strings"
@@ -1008,8 +1007,6 @@
 	return t()
 }
 
-var tlsrsakex = godebug.New("tlsrsakex")
-
 func (c *Config) cipherSuites() []uint16 {
 	if needFIPS() {
 		return fipsCipherSuites(c)
@@ -1017,9 +1014,6 @@
 	if c.CipherSuites != nil {
 		return c.CipherSuites
 	}
-	if tlsrsakex.Value() == "1" {
-		return defaultCipherSuitesWithRSAKex
-	}
 	return defaultCipherSuites
 }
 
@@ -1035,8 +1029,6 @@
 const roleClient = true
 const roleServer = false
 
-var tls10server = godebug.New("tls10server")
-
 func (c *Config) supportedVersions(isClient bool) []uint16 {
 	versions := make([]uint16, 0, len(supportedVersions))
 	for _, v := range supportedVersions {
@@ -1044,7 +1036,7 @@
 			continue
 		}
 		if (c == nil || c.MinVersion == 0) && v < VersionTLS12 {
-			if isClient || tls10server.Value() != "1" {
+			if isClient {
 				continue
 			}
 		}
diff -u a/conn.go b/conn.go
--- a/conn.go	2024-03-01 09:37:46.487971332 +0100
+++ b/conn.go	2024-03-01 09:51:00.095953662 +0100
@@ -15,7 +15,6 @@
 	"errors"
 	"fmt"
 	"hash"
-	"internal/godebug"
 	"io"
 	"net"
 	"sync"
@@ -1600,8 +1599,6 @@
 	return c.connectionStateLocked()
 }
 
-var tlsunsafeekm = godebug.New("tlsunsafeekm")
-
 func (c *Conn) connectionStateLocked() ConnectionState {
 	var state ConnectionState
 	state.HandshakeComplete = c.isHandshakeComplete.Load()
@@ -1626,10 +1623,6 @@
 		state.ekm = noEKMBecauseRenegotiation
 	} else if c.vers != VersionTLS13 && !c.extMasterSecret {
 		state.ekm = func(label string, context []byte, length int) ([]byte, error) {
-			if tlsunsafeekm.Value() == "1" {
-				tlsunsafeekm.IncNonDefault()
-				return c.ekm(label, context, length)
-			}
 			return noEKMBecauseNoEMS(label, context, length)
 		}
 	} else {
diff -u a/handshake_client.go b/handshake_client.go
--- a/handshake_client.go	2024-03-01 09:37:46.487971332 +0100
+++ b/handshake_client.go	2024-03-01 09:51:52.295952499 +0100
@@ -17,10 +17,8 @@
 	"errors"
 	"fmt"
 	"hash"
-	"internal/godebug"
 	"io"
 	"net"
-	"strconv"
 	"strings"
 	"time"
 )
@@ -526,10 +524,6 @@
 		return errors.New("tls: server chose an unconfigured cipher suite")
 	}
 
-	if hs.c.config.CipherSuites == nil && rsaKexCiphers[hs.suite.id] {
-		tlsrsakex.IncNonDefault()
-	}
-
 	hs.c.cipherSuite = hs.suite.id
 	return nil
 }
@@ -946,17 +940,7 @@
 // to verify the signatures of during a TLS handshake.
 const defaultMaxRSAKeySize = 8192
 
-var tlsmaxrsasize = godebug.New("tlsmaxrsasize")
-
 func checkKeySize(n int) (max int, ok bool) {
-	if v := tlsmaxrsasize.Value(); v != "" {
-		if max, err := strconv.Atoi(v); err == nil {
-			if (n <= max) != (n <= defaultMaxRSAKeySize) {
-				tlsmaxrsasize.IncNonDefault()
-			}
-			return max, n <= max
-		}
-	}
 	return defaultMaxRSAKeySize, n <= defaultMaxRSAKeySize
 }
 
diff -u a/handshake_server.go b/handshake_server.go
--- a/handshake_server.go	2024-03-01 09:37:46.491971332 +0100
+++ b/handshake_server.go	2024-03-01 09:52:00.187952324 +0100
@@ -168,10 +168,6 @@
 	c.in.version = c.vers
 	c.out.version = c.vers
 
-	if c.config.MinVersion == 0 && c.vers < VersionTLS12 {
-		tls10server.IncNonDefault()
-	}
-
 	return clientHello, nil
 }
 
@@ -370,10 +366,6 @@
 	}
 	c.cipherSuite = hs.suite.id
 
-	if c.config.CipherSuites == nil && rsaKexCiphers[hs.suite.id] {
-		tlsrsakex.IncNonDefault()
-	}
-
 	for _, id := range hs.clientHello.cipherSuites {
 		if id == TLS_FALLBACK_SCSV {
 			// The client is doing a fallback connection. See RFC 7507.
Common subdirectories: crypto/tls/testdata and crypto/tls/testdata
diff -u a/tls_test.go b/tls_test.go
--- a/tls_test.go	2024-03-01 09:37:46.507971332 +0100
+++ b/tls_test.go	2024-03-01 09:51:00.095953662 +0100
@@ -12,7 +12,6 @@
 	"encoding/json"
 	"errors"
 	"fmt"
-	"internal/testenv"
 	"io"
 	"math"
 	"net"
@@ -503,8 +502,6 @@
 }
 
 func TestVerifyHostname(t *testing.T) {
-	testenv.MustHaveExternalNetwork(t)
-
 	c, err := Dial("tcp", "www.google.com:https", nil)
 	if err != nil {
 		t.Fatal(err)
